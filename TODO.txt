### 1) Cherry pick FROM 
{ 
	-GraniteHouse,
	-California,
	-NUnit Project
} 
TO NotDonkeyApp - make it one big good web app

### 2) Cherry pick FROM 
{ 
	-LandonApi and WebApi,
	-NUnit Project,
	-WebApi,
	-QuotesApi
} 
TO Coffee Api

### 3) NUnit NotDonkey MVC, Coffee Api


WHAT IS USEFULL IN APP : 

=> 1) GraniteHouse : 
* Areas, customer and admin
* Extensions - Extension methods folder
* View Models
* Atrybuty w modelu [Display(Name="Product Type")], [ForeignKey("ProductTypeId")], [NotMapped]
* Utility folder - StaticDetails class
* partial views
=> 2) NUnit Project : 
* All types of unit tests
=> 3) LandonApi :
* Produces() or ProducesResponseType()
* [HttpGet(Name = nameof(GetRoot))]
* RootController with GetRoot method, ktory jako response zwraca dostepne Linki, endpointy i metody
* JsonExceptionFilter - customowa klasa
=> 4) WebApi :
* Repository Pattern with dependency injection prepared for Unit Testing
* [StringLength], [EmailAddress], [Phone], [DataType(DataType.Date)]
* ICollection<T> jak chcemy liste czegos 
* [range(min, max)], [regex(expression)]
=> 5) California : 
* app.UseExceptionHandler(url); instead of hardcoded trycatch and view
* [EmailAddress, MaxLength(500)], [DataType(DataType.Password)]
* [Compare("Password", ErrorMessage = "Passwords must match")], [Display(Name = "Confirm Password")]
* Rozne bazy danych, kilkukrotne dodanie w Startup.cs roznego dbContext
* ViewBag ogarnac i uzyc 
* Partial View ogarnac i uzyc jakis z 2 parametrem, czyli poza nazwa jakis model przekazujemy 
* custom View Component, ktory mozna renderowac jak Tag Helper :D
=> 6) QuotesApi
* FromBody, FromRoute itd
* [HttpGet("{id}", Name = "Get")]
